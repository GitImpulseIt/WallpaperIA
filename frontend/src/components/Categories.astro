---
import { config } from '../config';
import { getTranslation } from '../i18n';

const { lang } = Astro.props;
const t = getTranslation(lang);
---

<section class="categories" id="categories">
  <div class="container">
    <h2 class="section-title">{t.categories.title}</h2>
    <p class="section-subtitle">{t.categories.subtitle}</p>

    <!-- Loading state -->
    <div class="loading-message" id="loadingMessage">
      <div class="spinner"></div>
      <p>Loading categories...</p>
    </div>

    <!-- Error state -->
    <div class="error-message" id="errorMessage" style="display: none;">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
      <p>{t.categories.loadingError}</p>
    </div>

    <!-- Categories grid -->
    <div class="categories-grid" id="categoriesGrid" style="display: none;"></div>
  </div>
</section>

<script is:inline define:vars={{ apiBaseUrl: config.apiBaseUrl, thumbnailsPath: config.thumbnailsPath }}>
  // Fonction pour créer une étoile
  function createStarSVG(filled) {
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('class', filled ? 'star-filled' : 'star-empty');
    svg.setAttribute('width', '16');
    svg.setAttribute('height', '16');
    svg.setAttribute('viewBox', '0 0 24 24');
    svg.setAttribute('fill', filled ? 'currentColor' : 'none');
    svg.setAttribute('stroke', 'currentColor');
    svg.setAttribute('stroke-width', '2');

    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z');
    svg.appendChild(path);

    return svg;
  }

  // Fonction pour créer une carte de catégorie
  function createCategoryCard(category) {
    const card = document.createElement('div');
    card.className = 'category-card';

    // Image container
    const imageDiv = document.createElement('div');
    imageDiv.className = 'category-image';

    const img = document.createElement('img');
    img.src = `${thumbnailsPath}${category.thumbnail}`;
    img.alt = category.name;
    img.loading = 'lazy';

    imageDiv.appendChild(img);

    // Overlay avec étoiles (si rating disponible dans l'API)
    if (category.rating) {
      const overlay = document.createElement('div');
      overlay.className = 'category-overlay';

      const rating = document.createElement('div');
      rating.className = 'category-rating';

      // Créer les étoiles
      for (let i = 0; i < 5; i++) {
        rating.appendChild(createStarSVG(i < category.rating));
      }

      overlay.appendChild(rating);
      imageDiv.appendChild(overlay);
    }

    // Info container
    const infoDiv = document.createElement('div');
    infoDiv.className = 'category-info';

    const name = document.createElement('h3');
    name.className = 'category-name';
    name.textContent = category.name;

    infoDiv.appendChild(name);

    card.appendChild(imageDiv);
    card.appendChild(infoDiv);

    return card;
  }

  // Charger les catégories via AJAX
  async function loadCategories() {
    const loadingMessage = document.getElementById('loadingMessage');
    const errorMessage = document.getElementById('errorMessage');
    const categoriesGrid = document.getElementById('categoriesGrid');

    try {
      console.log('[Categories] Fetching from API:', `${apiBaseUrl}/categories`);

      const response = await fetch(`${apiBaseUrl}/categories`);

      console.log('[Categories] Response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('[Categories] Data received:', data);

      // L'API retourne {success: true, data: [...]}
      const categories = data.data || data.categories || [];
      console.log('[Categories] Number of categories:', categories.length);

      if (categories.length === 0) {
        throw new Error('No categories found');
      }

      // Masquer le loading
      loadingMessage.style.display = 'none';

      // Créer les cartes de catégories
      categories.forEach(category => {
        const card = createCategoryCard(category);
        categoriesGrid.appendChild(card);
      });

      // Afficher la grille
      categoriesGrid.style.display = 'grid';

      console.log('[Categories] Successfully loaded', categories.length, 'categories');

    } catch (error) {
      console.error('[Categories] Failed to load:', error);

      // Afficher l'erreur
      loadingMessage.style.display = 'none';
      errorMessage.style.display = 'flex';
    }
  }

  // Charger les catégories au chargement de la page
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadCategories);
  } else {
    loadCategories();
  }
</script>

<style>
  .categories {
    padding: 6rem 0;
    background: #1e293b;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .section-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: white;
    text-align: center;
    margin-bottom: 1rem;
  }

  .section-subtitle {
    font-size: 1.25rem;
    color: rgba(255, 255, 255, 0.6);
    text-align: center;
    margin-bottom: 4rem;
  }

  .loading-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 4rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .loading-message p {
    font-size: 1.125rem;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-top-color: #2196F3;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .error-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .error-message svg {
    color: #d14836;
  }

  .error-message p {
    font-size: 1.125rem;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }

  .category-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s;
    cursor: pointer;
  }

  .category-card:hover {
    transform: translateY(-8px);
    border-color: #2196F3;
    box-shadow: 0 20px 40px rgba(33, 150, 243, 0.3);
  }

  .category-image {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    background: #0f172a;
  }

  .category-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .category-card:hover .category-image img {
    transform: scale(1.1);
  }

  .category-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8) 0%, transparent 60%);
    display: flex;
    align-items: flex-end;
    padding: 1rem;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .category-card:hover .category-overlay {
    opacity: 1;
  }

  .category-rating {
    display: flex;
    gap: 0.25rem;
  }

  .star-filled {
    color: #fbbf24;
  }

  .star-empty {
    color: rgba(255, 255, 255, 0.3);
  }

  .category-info {
    padding: 1.5rem;
  }

  .category-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    margin: 0;
    text-align: center;
  }

  @media (max-width: 768px) {
    .categories {
      padding: 3rem 0;
    }

    .section-title {
      font-size: 2rem;
    }

    .section-subtitle {
      font-size: 1rem;
      margin-bottom: 2rem;
    }

    .categories-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1.5rem;
    }
  }
</style>
