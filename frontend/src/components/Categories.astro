---
import { config } from '../config';
import { getTranslation } from '../i18n';

const { lang } = Astro.props;
const t = getTranslation(lang);

interface Category {
  id: string;
  name: string;
  rating: number;
  thumbnail: string;
}

let categories: Category[] = [];
let error = false;

try {
  const response = await fetch(`${config.apiBaseUrl}/categories`);
  if (response.ok) {
    const data = await response.json();
    categories = data.categories || [];
  } else {
    error = true;
  }
} catch (e) {
  error = true;
  console.error('Failed to load categories:', e);
}
---

<section class="categories" id="categories">
  <div class="container">
    <h2 class="section-title">{t.categories.title}</h2>
    <p class="section-subtitle">{t.categories.subtitle}</p>

    {error ? (
      <div class="error-message">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
        <p>{t.categories.loadingError}</p>
      </div>
    ) : (
      <div class="categories-grid">
        {categories.map((category) => (
          <div class="category-card">
            <div class="category-image">
              <img
                src={`${config.thumbnailsPath}${category.thumbnail}`}
                alt={category.name}
                loading="lazy"
              />
              <div class="category-overlay">
                <div class="category-rating">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <svg
                      class={i < category.rating ? 'star-filled' : 'star-empty'}
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill={i < category.rating ? 'currentColor' : 'none'}
                      stroke="currentColor"
                      stroke-width="2"
                    >
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                  ))}
                </div>
              </div>
            </div>
            <div class="category-info">
              <h3 class="category-name">{category.name}</h3>
            </div>
          </div>
        ))}
      </div>
    )}
  </div>
</section>

<style>
  .categories {
    padding: 6rem 0;
    background: #1e293b;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .section-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: white;
    text-align: center;
    margin-bottom: 1rem;
  }

  .section-subtitle {
    font-size: 1.25rem;
    color: rgba(255, 255, 255, 0.6);
    text-align: center;
    margin-bottom: 4rem;
  }

  .error-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .error-message svg {
    color: #d14836;
  }

  .error-message p {
    font-size: 1.125rem;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
  }

  .category-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s;
    cursor: pointer;
  }

  .category-card:hover {
    transform: translateY(-8px);
    border-color: #2196F3;
    box-shadow: 0 20px 40px rgba(33, 150, 243, 0.3);
  }

  .category-image {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    background: #0f172a;
  }

  .category-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .category-card:hover .category-image img {
    transform: scale(1.1);
  }

  .category-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8) 0%, transparent 60%);
    display: flex;
    align-items: flex-end;
    padding: 1rem;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .category-card:hover .category-overlay {
    opacity: 1;
  }

  .category-rating {
    display: flex;
    gap: 0.25rem;
  }

  .star-filled {
    color: #fbbf24;
  }

  .star-empty {
    color: rgba(255, 255, 255, 0.3);
  }

  .category-info {
    padding: 1.5rem;
  }

  .category-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    margin: 0;
    text-align: center;
  }

  @media (max-width: 768px) {
    .categories {
      padding: 3rem 0;
    }

    .section-title {
      font-size: 2rem;
    }

    .section-subtitle {
      font-size: 1rem;
      margin-bottom: 2rem;
    }

    .categories-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1.5rem;
    }
  }
</style>
