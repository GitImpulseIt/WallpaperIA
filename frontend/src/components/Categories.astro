---
import { config } from '../config';
import { getTranslation } from '../i18n';

const { lang } = Astro.props;
const t = getTranslation(lang);
---

<section class="categories" id="categories">
  <div class="container">
    <h2 class="section-title">{t.categories.title}</h2>
    <p class="section-subtitle">{t.categories.subtitle}</p>

    <!-- Loading state -->
    <div class="loading-message" id="loadingMessage">
      <div class="spinner"></div>
      <p>Loading categories...</p>
    </div>

    <!-- Error state -->
    <div class="error-message" id="errorMessage" style="display: none;">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
      <p>{t.categories.loadingError}</p>
    </div>

    <!-- Categories Carousel -->
    <div class="categories-carousel" id="categoriesCarousel" style="display: none;">
      <div class="carousel-wrapper">
        <button class="carousel-btn carousel-prev" id="prevCategoriesBtn" aria-label="Previous">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>

        <div class="carousel-container">
          <div class="carousel-slides" id="carouselSlides"></div>
        </div>

        <button class="carousel-btn carousel-next" id="nextCategoriesBtn" aria-label="Next">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>

      <div class="carousel-dots" id="carouselDots"></div>

      <div class="carousel-info" id="carouselInfo">
        <span id="currentPage">1</span> / <span id="totalPages">1</span>
      </div>
    </div>
  </div>
</section>

<script is:inline define:vars={{ apiBaseUrl: config.apiBaseUrl, thumbnailsPath: config.thumbnailsPath }}>
  // Configuration du carrousel
  const ITEMS_PER_PAGE = 9;
  let allCategories = [];
  let currentPage = 0;
  let totalPages = 0;
  let touchStartX = 0;
  let touchEndX = 0;

  // Fonction pour créer une carte de catégorie
  function createCategoryCard(category) {
    const card = document.createElement('div');
    card.className = 'category-card';

    const imageDiv = document.createElement('div');
    imageDiv.className = 'category-image';

    const img = document.createElement('img');
    img.src = `${thumbnailsPath}${category.thumbnail}`;
    img.alt = category.name;
    img.loading = 'lazy';

    imageDiv.appendChild(img);

    const infoDiv = document.createElement('div');
    infoDiv.className = 'category-info';

    const name = document.createElement('h3');
    name.className = 'category-name';
    name.textContent = category.name;

    infoDiv.appendChild(name);
    card.appendChild(imageDiv);
    card.appendChild(infoDiv);

    return card;
  }

  // Créer une slide avec 9 catégories
  function createSlide(categories, startIndex) {
    const slide = document.createElement('div');
    slide.className = 'carousel-slide';

    const grid = document.createElement('div');
    grid.className = 'categories-grid';

    const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, categories.length);

    for (let i = startIndex; i < endIndex; i++) {
      const card = createCategoryCard(categories[i]);
      grid.appendChild(card);
    }

    slide.appendChild(grid);
    return slide;
  }

  // Mettre à jour le carrousel
  function updateCarousel() {
    const carouselSlides = document.getElementById('carouselSlides');
    const carouselDots = document.getElementById('carouselDots');
    const currentPageSpan = document.getElementById('currentPage');
    const totalPagesSpan = document.getElementById('totalPages');

    // Mettre à jour la position
    const offset = -currentPage * 100;
    carouselSlides.style.transform = `translateX(${offset}%)`;

    // Mettre à jour les dots
    const dots = carouselDots.querySelectorAll('.dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentPage);
    });

    // Mettre à jour l'info de pagination
    currentPageSpan.textContent = currentPage + 1;
    totalPagesSpan.textContent = totalPages;

    // Activer/désactiver les boutons
    const prevBtn = document.getElementById('prevCategoriesBtn');
    const nextBtn = document.getElementById('nextCategoriesBtn');

    prevBtn.disabled = currentPage === 0;
    nextBtn.disabled = currentPage === totalPages - 1;
  }

  // Aller à une page spécifique
  function goToPage(pageIndex) {
    if (pageIndex < 0 || pageIndex >= totalPages) return;
    currentPage = pageIndex;
    updateCarousel();
    console.log(`[Carousel] Navigated to page ${currentPage + 1}/${totalPages}`);
  }

  // Navigation
  function nextPage() {
    if (currentPage < totalPages - 1) {
      goToPage(currentPage + 1);
    }
  }

  function prevPage() {
    if (currentPage > 0) {
      goToPage(currentPage - 1);
    }
  }

  // Gestion du swipe tactile
  function handleTouchStart(e) {
    touchStartX = e.changedTouches[0].screenX;
  }

  function handleTouchEnd(e) {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextPage(); // Swipe gauche
      } else {
        prevPage(); // Swipe droite
      }
    }
  }

  // Initialiser le carrousel
  function initCarousel(categories) {
    const carouselSlides = document.getElementById('carouselSlides');
    const carouselDots = document.getElementById('carouselDots');
    const categoriesCarousel = document.getElementById('categoriesCarousel');

    // Calculer le nombre de pages
    totalPages = Math.ceil(categories.length / ITEMS_PER_PAGE);
    console.log(`[Carousel] Total pages: ${totalPages}`);

    // Créer les slides
    carouselSlides.innerHTML = '';
    for (let i = 0; i < totalPages; i++) {
      const slide = createSlide(categories, i * ITEMS_PER_PAGE);
      carouselSlides.appendChild(slide);
    }

    // Créer les dots
    carouselDots.innerHTML = '';
    for (let i = 0; i < totalPages; i++) {
      const dot = document.createElement('button');
      dot.className = 'dot';
      if (i === 0) dot.classList.add('active');
      dot.addEventListener('click', () => goToPage(i));
      carouselDots.appendChild(dot);
    }

    // Ajouter les event listeners pour les boutons
    document.getElementById('prevCategoriesBtn').addEventListener('click', prevPage);
    document.getElementById('nextCategoriesBtn').addEventListener('click', nextPage);

    // Ajouter les event listeners pour le swipe
    const carouselContainer = document.querySelector('.carousel-container');
    carouselContainer.addEventListener('touchstart', handleTouchStart, false);
    carouselContainer.addEventListener('touchend', handleTouchEnd, false);

    // Afficher le carrousel
    categoriesCarousel.style.display = 'block';
    updateCarousel();

    console.log(`[Carousel] Initialized with ${categories.length} categories, ${totalPages} pages`);
  }

  // Charger les catégories via AJAX
  async function loadCategories() {
    const loadingMessage = document.getElementById('loadingMessage');
    const errorMessage = document.getElementById('errorMessage');

    try {
      console.log('[Categories] Fetching from API:', `${apiBaseUrl}/categories`);

      const response = await fetch(`${apiBaseUrl}/categories`);
      console.log('[Categories] Response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('[Categories] Data received:', data);

      allCategories = data.data || data.categories || [];
      console.log('[Categories] Number of categories:', allCategories.length);

      if (allCategories.length === 0) {
        throw new Error('No categories found');
      }

      // Masquer le loading
      loadingMessage.style.display = 'none';

      // Initialiser le carrousel
      initCarousel(allCategories);

      console.log('[Categories] Successfully loaded and carousel initialized');

    } catch (error) {
      console.error('[Categories] Failed to load:', error);
      loadingMessage.style.display = 'none';
      errorMessage.style.display = 'flex';
    }
  }

  // Charger les catégories au chargement de la page
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadCategories);
  } else {
    loadCategories();
  }
</script>

<style>
  .categories {
    padding: 6rem 0;
    background: #1e293b;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .section-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: white;
    text-align: center;
    margin-bottom: 1rem;
  }

  .section-subtitle {
    font-size: 1.25rem;
    color: rgba(255, 255, 255, 0.6);
    text-align: center;
    margin-bottom: 4rem;
  }

  .loading-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 4rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .loading-message p {
    font-size: 1.125rem;
  }

  .spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-top-color: #2196F3;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .error-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 3rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .error-message svg {
    color: #d14836;
  }

  .error-message p {
    font-size: 1.125rem;
  }

  /* Carrousel */
  .categories-carousel {
    position: relative;
  }

  .carousel-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .carousel-container {
    overflow: hidden;
    flex: 1;
  }

  .carousel-slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-slide {
    min-width: 100%;
    flex-shrink: 0;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
  }

  .category-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s;
    cursor: pointer;
  }

  .category-card:hover {
    transform: translateY(-8px);
    border-color: #2196F3;
    box-shadow: 0 20px 40px rgba(33, 150, 243, 0.3);
  }

  .category-image {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    background: #0f172a;
  }

  .category-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .category-card:hover .category-image img {
    transform: scale(1.1);
  }

  .category-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8) 0%, transparent 60%);
    display: flex;
    align-items: flex-end;
    padding: 1rem;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .category-card:hover .category-overlay {
    opacity: 1;
  }

  .category-rating {
    display: flex;
    gap: 0.25rem;
  }

  .star-filled {
    color: #fbbf24;
  }

  .star-empty {
    color: rgba(255, 255, 255, 0.3);
  }

  .category-info {
    padding: 1.5rem;
  }

  .category-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    margin: 0;
    text-align: center;
  }

  /* Boutons de navigation du carrousel */
  .carousel-btn {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .carousel-btn:hover:not(:disabled) {
    background: rgba(33, 150, 243, 0.3);
    border-color: #2196F3;
    transform: scale(1.1);
  }

  .carousel-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  /* Dots de navigation */
  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    margin-top: 2rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    border: none;
    cursor: pointer;
    transition: all 0.3s;
    padding: 0;
  }

  .dot:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  .dot.active {
    background: #2196F3;
    width: 32px;
    border-radius: 6px;
  }

  /* Info de pagination */
  .carousel-info {
    text-align: center;
    margin-top: 1rem;
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.95rem;
  }

  @media (max-width: 768px) {
    .categories {
      padding: 3rem 0;
    }

    .section-title {
      font-size: 2rem;
    }

    .section-subtitle {
      font-size: 1rem;
      margin-bottom: 2rem;
    }

    .categories-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .carousel-btn {
      width: 40px;
      height: 40px;
    }

    .carousel-wrapper {
      gap: 0.5rem;
    }
  }
</style>
