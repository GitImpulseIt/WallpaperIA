---
import { getTranslation } from '../i18n';

const { lang } = Astro.props;
const t = getTranslation(lang);
---

<section class="hero">
  <div class="hero-background">
    <div class="hero-bg-slider">
      <div class="hero-bg-image active" style="background-image: url('/img/bg1.jpg')"></div>
      <div class="hero-bg-image" data-bg="/img/bg2.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg3.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg4.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg5.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg6.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg7.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg8.jpg"></div>
      <div class="hero-bg-image" data-bg="/img/bg9.jpg"></div>
    </div>
  </div>
  <div class="container">
    <div class="hero-content">
      <h1 class="hero-title">{t.hero.title}</h1>
      <p class="hero-subtitle">{t.hero.subtitle}</p>
      <p class="hero-description">{t.hero.description}</p>

      <div class="hero-actions">
        <a href="/files/WallpaperAI-Setup.exe" class="btn btn-primary btn-large" download>
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7 10 12 15 17 10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          {t.hero.downloadButton}
        </a>
      </div>

      <div class="hero-badges">
        <div class="badge">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
          </svg>
          <span>{t.hero.free}</span>
        </div>
        <div class="badge">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
            <line x1="3" y1="21" x2="21" y2="3"></line>
          </svg>
          <span>{t.hero.noAds}</span>
        </div>
        <div class="badge">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 12c-2-2.67-4-4-6-4a4 4 0 1 0 0 8c2 0 4-1.33 6-4Zm0 0c2 2.67 4 4 6 4a4 4 0 0 0 0-8c-2 0-4 1.33-6 4Z"></path>
          </svg>
          <span>{t.hero.unlimited}</span>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding-top: 70px;
    overflow: hidden;
  }

  .hero-background {
    position: absolute;
    inset: 0;
    z-index: -1;
  }

  .hero-bg-slider {
    position: absolute;
    inset: 0;
  }

  .hero-bg-image {
    position: absolute;
    inset: 0;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0;
    transition: opacity 2s ease-in-out;
  }

  .hero-bg-image.active {
    opacity: 1;
  }

  .hero-background::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.85) 0%, rgba(30, 41, 59, 0.75) 50%, rgba(15, 23, 42, 0.85) 100%);
    z-index: 1;
  }

  .hero-background::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image:
      radial-gradient(circle at 20% 50%, rgba(33, 150, 243, 0.15) 0%, transparent 50%),
      radial-gradient(circle at 80% 80%, rgba(139, 69, 19, 0.1) 0%, transparent 50%);
    animation: pulse 8s ease-in-out infinite;
    z-index: 2;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    z-index: 3;
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
  }

  .hero-title {
    font-size: 3.5rem;
    font-weight: 800;
    color: white;
    margin-bottom: 1.5rem;
    line-height: 1.2;
    background: linear-gradient(135deg, #ffffff 0%, #94a3b8 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero-subtitle {
    font-size: 1.5rem;
    color: #2196F3;
    margin-bottom: 1.5rem;
    font-weight: 600;
  }

  .hero-description {
    font-size: 1.125rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 3rem;
    line-height: 1.8;
  }

  .hero-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 3rem;
  }

  .btn {
    padding: 1rem 2rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s;
    border: none;
    cursor: pointer;
    font-size: 1.125rem;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
  }

  .btn-large {
    padding: 1.25rem 2.5rem;
    font-size: 1.25rem;
  }

  .btn-primary {
    background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
    color: white;
    box-shadow: 0 10px 40px rgba(33, 150, 243, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 60px rgba(33, 150, 243, 0.5);
  }

  .hero-badges {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50px;
    color: white;
    font-weight: 600;
  }

  .badge svg {
    color: #2196F3;
  }

  @media (max-width: 768px) {
    .hero {
      padding-top: 60px;
      min-height: auto;
      padding-bottom: 4rem;
    }

    .hero-title {
      font-size: 2.25rem;
    }

    .hero-subtitle {
      font-size: 1.125rem;
    }

    .hero-description {
      font-size: 1rem;
    }

    .btn-large {
      padding: 1rem 2rem;
      font-size: 1.125rem;
    }

    .hero-badges {
      gap: 1rem;
    }

    .badge {
      font-size: 0.875rem;
      padding: 0.6rem 1.2rem;
    }
  }
</style>

<script>
  (function() {
    'use strict';

    // Configuration
    const TRANSITION_DURATION = 2000; // 2s de fondu
    const DISPLAY_DURATION = 6000; // 6s d'affichage par image
    const TOTAL_DURATION = TRANSITION_DURATION + DISPLAY_DURATION;

    const images = document.querySelectorAll('.hero-bg-image');
    if (images.length === 0) return;

    let currentIndex = 0;
    let isTransitioning = false;
    const loadedImages = new Set([0]); // bg1.jpg est déjà préchargé

    // Fonction pour précharger une image
    function preloadImage(index: number): void {
      if (index >= images.length || loadedImages.has(index)) return;

      const img = images[index] as HTMLElement;
      const bgUrl = img.getAttribute('data-bg');
      if (!bgUrl) return;

      const preloader = new Image();
      preloader.onload = () => {
        img.style.backgroundImage = `url('${bgUrl}')`;
        loadedImages.add(index);
      };
      preloader.onerror = () => {
        console.error(`Failed to load background image: ${bgUrl}`);
      };
      preloader.src = bgUrl;
    }

    // Fonction pour passer à l'image suivante
    function nextImage(): void {
      if (isTransitioning) return;
      isTransitioning = true;

      const currentImage = images[currentIndex] as HTMLElement;
      const nextIndex = (currentIndex + 1) % images.length;
      const nextImageElement = images[nextIndex] as HTMLElement;

      // Précharger l'image suivante (n+2) en avance
      const futureIndex = (nextIndex + 1) % images.length;
      preloadImage(futureIndex);

      // Vérifier que l'image suivante est chargée
      if (!loadedImages.has(nextIndex)) {
        // Si pas encore chargée, attendre un peu et réessayer
        setTimeout(() => {
          isTransitioning = false;
          nextImage();
        }, 500);
        return;
      }

      // Effectuer la transition
      currentImage.classList.remove('active');
      nextImageElement.classList.add('active');

      currentIndex = nextIndex;

      // Permettre la prochaine transition après la fin du fondu
      setTimeout(() => {
        isTransitioning = false;
      }, TRANSITION_DURATION);
    }

    // Précharger les 2-3 premières images au démarrage
    setTimeout(() => preloadImage(1), 1000);
    setTimeout(() => preloadImage(2), 2000);

    // Démarrer le défilement automatique
    setInterval(nextImage, TOTAL_DURATION);
  })();
</script>
